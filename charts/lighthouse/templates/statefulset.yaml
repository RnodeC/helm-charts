{{- $lhrole := include "lighthouse.lhrole" . -}}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: lighthouse-{{ $lhrole }}
  labels:
{{ include "lighthouse.labels" . | indent 4 }}
{{ if eq $lhrole "beacon" -}}
{{ include "lighthouse.beacon-labels" . | indent 4 }}
{{- else if eq $lhrole "validator" -}}
{{ include "lighthouse.validator-labels" . | indent 4 }}
{{- end }}
spec:
  replicas: {{ .Values.replicas }}
  serviceName: lighthouse
  selector:
    matchLabels:
{{ include "lighthouse.labels" . | indent 6 }}
{{ if eq $lhrole "beacon" -}}
{{ include "lighthouse.beacon-labels" . | indent 6 }}
{{- else if eq $lhrole "validator" -}}
{{ include "lighthouse.validator-labels" . | indent 6 }}
{{- end }}
  template:
    metadata:
      labels:
{{ include "lighthouse.labels" . | indent 8 }}
{{ if eq $lhrole "beacon" -}}
{{ include "lighthouse.beacon-labels" . | indent 8 }}
{{- else if eq $lhrole "validator" -}}
{{ include "lighthouse.validator-labels" . | indent 8 }}
{{- end }}
    spec:
      serviceAccountName: {{ include "lighthouse.serviceAccountName" . }}     
      {{- if eq $lhrole "beacon" }}
      volumes:
       - name: jwt
         secret:
           secretName: lh-jwt
      {{- end }}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchLabels:
                  app.kubernetes.io/name: geth
              namespaces:
              - geth
              topologyKey: kubernetes.io/hostname
      {{- if eq $lhrole "validator" }}
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - namespaces:
            - {{ .Release.Namespace }}
            labelSelector:
              matchLabels:
{{ include "lighthouse.beacon-labels" . | indent 16 }}
            topologyKey: kubernetes.io/hostname
      {{- end }}
      containers:
      - name: lighthouse
        image: {{ include "lighthouse.image" . }}
        imagePullPolicy: IfNotPresent
        command: 
        - lighthouse 
        - {{ $lhrole }}
        args:
        {{ with .Values.lighthouse -}}
        - --network={{ .network }}
        - --datadir=/chaindata
        {{- if .http.enabled }}
        - --http
        {{- end }}
        {{- if .metrics.enabled }}
        {{- $metrics_port := include "lighthouse.metricsPort" (dict "role" $lhrole) }}
        - --metrics
        - --metrics-address=0.0.0.0
        - --metrics-allow-origin=*
        - --metrics-port={{ $metrics_port }}
        {{- end }}
        {{- if eq $lhrole "beacon" }}
        - --prune-payloads=false
        - --disable-upnp
        - --validator-monitor-auto
        {{- $beacon := default dict .beacon -}}
        {{- if $beacon.execution_endpoint }}
        - --execution-endpoint=http://{{- $beacon.execution_endpoint.host -}}:{{- $beacon.execution_endpoint.port }}
        - --execution-jwt=/etc/eth2/jwt
        {{- end }}
        {{- if $beacon.checkpoint_sync.enabled }}
        - --checkpoint-sync-url={{- required "lighthouse.beacon.checkpoint_sync.url is required when checkpoint_sync is enabled" $beacon.checkpoint_sync.url -}}
        {{- end }}
        {{- if $beacon.enr.host }}
        - --enr-address={{- $beacon.enr.host }}
        - --enr-udp-port={{- $beacon.enr.port }}
        - --enr-tcp-port={{- $beacon.enr.port }}
        {{- end }}
        {{- end }}
        {{- if eq $lhrole "validator" }}
        {{- $validator := default dict .validator -}}
        {{- if $validator.graffiti }}
        - --graffiti={{ $validator.graffiti | quote }}
        {{- end }}
        {{- if $validator.fee_recipient }}
        - --suggested-fee-recipient={{ $validator.fee_recipient | quote }}
        {{- end }}
        - --beacon-nodes=http://lighthouse-beacon.lighthouse:5052
        {{- end }}
        ports:
          {{ if .http.enabled -}}
          - name: http
            containerPort: 5052
            protocol: TCP
          {{- end }}
          {{- if .metrics.enabled }}
          {{- $metrics_port := include "lighthouse.metricsPort" (dict "role" $lhrole) }}
          - name: metrics
            containerPort: {{ $metrics_port }}
            protocol: TCP
          {{- end }}
          - name: tcppeer
            containerPort: 9000
            protocol: TCP
          - name: udppeer
            containerPort: 9000
            protocol: UDP
        {{- end }}
        livenessProbe:
          periodSeconds: 10
          initialDelaySeconds: 10
          successThreshold: 1
          terminationGracePeriodSeconds: 60
          exec:
            command: 
            - cat
            - /chaindata/beacon/network/enr.dat
        readinessProbe:
          periodSeconds: 10
          initialDelaySeconds: 10
          successThreshold: 1
          exec:
            command: 
            - cat 
            - /chaindata/beacon/network/enr.dat
        startupProbe:
          initialDelaySeconds: 120
          exec:
            command: 
            - cat 
            - /chaindata/beacon/network/enr.dat
        resources:
          {{- toYaml .Values.resources | nindent 10 }}
        securityContext:
          seccompProfile:
            type: RuntimeDefault
          privileged: false
          allowPrivilegeEscalation: false
          capabilities:
            drop:  
              - ALL
        volumeMounts:
        - name: chaindata
          mountPath: /chaindata
        {{- if eq $lhrole "beacon" }}
        - name: jwt
          mountPath: /etc/eth2
        {{- end }}
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      {{- if eq $lhrole "validator" }}
      volumes:
      - name: chaindata
        persistentVolumeClaim:
          claimName: chaindata-lighthouse-beacon-0      
      {{- end }}
  {{- if eq $lhrole "beacon" }}
  volumeClaimTemplates:
  - apiVersion: v1
    metadata:
      name: chaindata
      labels:
{{ include "lighthouse.labels" . | indent 8 }}
    spec:
      storageClassName: {{ .Values.storage.storageClassName }}
      accessModes: ["ReadWriteOnce"]
      resources:
        requests:
          storage: {{ .Values.storage.pvcSize }}
  {{- end }}
